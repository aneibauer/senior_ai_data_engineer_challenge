services:

  #troubleshooting: remove cached constainers
  pulsar:
    image: apachepulsar/pulsar:latest
    container_name: pulsar
    command: bin/pulsar standalone
    ports:
      - "6650:6650" # pulsar client port
      - "8080:8080" # pulsar admin port


  spark:
  # Using the Bitnami Spark image, which is a popular choice for running Spark in Docker
    build:
      context: ./spark_app
      dockerfile: Dockerfile #bitnami image in dockerfile
    # image: bitnami/spark:latest
    container_name: spark
    volumes:
      - ./spark_output:/opt/spark/output  # Mount local dir (./spark_output) to container dir (/opt/spark/output)
      - ./jars:/opt/spark/jars  # Mount local dir (./jars) to container dir (/opt/spark/jars)
    depends_on:
      - pulsar
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"   # Spark master port
      - "8081:8081"   # Spark master web UI


  # #this worked. docker said "spark-worker Pulled"
  # spark-worker:
  #   image: bitnami/spark:3.5.0
  #   container_name: spark-worker
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark:7077
  #   depends_on:
  #     - spark


  data-generator:
    build:
      context: .
      dockerfile: Dockerfile  # need a Dockerfile to install deps & run stream_processor
    depends_on:
      - pulsar
    environment:
      - PULSAR_HOST=pulsar #pulsar client will be created with pulsar service name instead of localhost
    command: python3 -m scripts.stream_processor  # start generating data and sending to Pulsar

  # postgres:
  #   image: postgres:15
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: user #in production these would be mountain to container,not hardcoded
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: events
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data #place on container where volume on host exists

  # fastapi:
  #   build:
  #     context: ./api
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - postgres

  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - prometheus

# volumes:
#   postgres_data: "local path on machine that will mount to container"